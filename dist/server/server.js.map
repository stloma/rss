{"version":3,"sources":["../../src/server/server.js"],"names":["install","app","LocalStrategy","require","Strategy","use","static","urlencoded","extended","json","secret","cookie","maxAge","store","saveUninitialized","resave","initialize","session","serializeUser","user","done","_id","deserializeUser","username","password","collection","findOne","then","message","isMatch","listen","console","log","get","req","res","sendFile","resolve"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;AACA;;AACA;;;;AAEA,2BAAiBA,OAAjB;;AAEA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,gBAAgBC,QAAQ,gBAAR,EAA0BC,QAAhD;;AAEAH,IAAII,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,MAAf,CAAR;AACAL,IAAII,GAAJ,CAAQ,6BAAR;AACAJ,IAAII,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAP,IAAII,GAAJ,CAAQ,qBAAWI,IAAX,EAAR;;AAEAR,IAAII,GAAJ,CAAQ,8BAAQ;AACdK,UAAQ,QADM;AAEdC,UAAQ;AACNC,YAAQ,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,CADxB,CAC0B;AAD1B,GAFM;AAKdC,kBALc;AAMdC,qBAAmB,IANL;AAOdC,UAAQ;AAPM,CAAR,CAAR;;AAUAd,IAAII,GAAJ,CAAQ,mBAASW,UAAT,EAAR;AACAf,IAAII,GAAJ,CAAQ,mBAASY,OAAT,EAAR;;AAEA,mBAASC,aAAT,CAAuB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC3CA,OAAK,IAAL,EAAWD,KAAKE,GAAhB;AACD,CAFD;;AAIA,mBAASC,eAAT,CAAyB,UAAUH,IAAV,EAAgBC,IAAhB,EAAsB;AAC7CA,OAAK,IAAL,EAAWD,IAAX;AACD,CAFD;;AAIA,mBAASd,GAAT,CAAa,IAAIH,aAAJ,CACX,UAAUqB,QAAV,EAAoBC,QAApB,EAA8BJ,IAA9B,EAAoC;AAClC,iBAAWK,UAAX,CAAsB,OAAtB,EAA+BC,OAA/B,CAAuC,EAAEH,UAAUA,QAAZ,EAAvC,EACGI,IADH,CACQ,gBAAQ;AACZ,QAAI,CAACR,IAAL,EAAW;AACT,aAAOC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEQ,SAAS,qBAAX,EAAlB,CAAP;AACD;AACD,+BAAgBJ,QAAhB,EAA0BL,KAAKK,QAA/B,EAAyC,UAAUK,OAAV,EAAmB;AAC1D,UAAIA,OAAJ,EAAa;AACX,eAAOT,KAAK,IAAL,EAAWD,IAAX,CAAP;AACD,OAFD,MAEO;AACL,eAAOC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEQ,SAAS,mBAAX,EAAlB,CAAP;AACD;AACF,KAND;AAOD,GAZH;AAaD,CAfU,CAAb;;AAkBA3B,IAAII,GAAJ,CAAQ,MAAR;AACAJ,IAAII,GAAJ,CAAQ,MAAR;;AAEAJ,IAAI6B,MAAJ,CAAW,IAAX,EAAiB,WAAjB,EAA8B,YAAM;AAClCC,UAAQC,GAAR,CAAY,0BAAZ;AACD,CAFD;;AAIA/B,IAAIgC,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAIC,QAAJ,CAAa,eAAKC,OAAL,CAAa,iBAAb,CAAb;AACD,CAFD","file":"server.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport SourceMapSupport from 'source-map-support'\nimport path from 'path'\nimport session from 'express-session'\nimport passport from 'passport'\nimport cookieParser from 'cookie-parser'\n\nimport { ComparePassword } from './models/user.js'\nimport { router as user } from './routes/user.js'\nimport { router as bookmarks } from './routes/bookmarks.js'\nimport { bookmarkDb, store } from './models/db.js'\n\nSourceMapSupport.install()\n\nconst app = express()\nconst LocalStrategy = require('passport-local').Strategy\n\napp.use(express.static('dist'))\napp.use(cookieParser())\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(bodyParser.json())\n\napp.use(session({\n  secret: 'secret',\n  cookie: {\n    maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n  },\n  store: store,\n  saveUninitialized: true,\n  resave: true\n}))\n\napp.use(passport.initialize())\napp.use(passport.session())\n\npassport.serializeUser(function (user, done) {\n  done(null, user._id)\n})\n\npassport.deserializeUser(function (user, done) {\n  done(null, user)\n})\n\npassport.use(new LocalStrategy(\n  function (username, password, done) {\n    bookmarkDb.collection('users').findOne({ username: username })\n      .then(user => {\n        if (!user) {\n          return done(null, false, { message: 'Incorrect username.' })\n        }\n        ComparePassword(password, user.password, function (isMatch) {\n          if (isMatch) {\n            return done(null, user)\n          } else {\n            return done(null, false, { message: 'Invalid password.' })\n          }\n        })\n      })\n  }\n))\n\napp.use('/api', user)\napp.use('/api', bookmarks)\n\napp.listen(3000, '127.0.0.1', () => {\n  console.log('App started on port 3000')\n})\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve('dist/index.html'))\n})\n"]}