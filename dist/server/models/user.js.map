{"version":3,"sources":["../../../src/server/models/user.js"],"names":["ComparePassword","candidatePassword","hash","callback","compare","err","isMatch","CreateUser","newUser","cb","genSalt","salt","password","insertUser","collection","insertOne","then","find","_id","result","insertedId","limit","next","catch","error","registerFieldType","name","username","email","created","validateRegistration","site","errors","emailPattern","field","type","push","match","length"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEO,IAAMA,4CAAkB,SAAlBA,eAAkB,CAACC,iBAAD,EAAoBC,IAApB,EAA0BC,QAA1B,EAAuC;AACpE,mBAAOC,OAAP,CAAeH,iBAAf,EAAkCC,IAAlC,EAAwC,UAAUG,GAAV,EAAeC,OAAf,EAAwB;AAC9D,QAAID,GAAJ,EAAS,MAAMA,GAAN;AACTF,aAASG,OAAT;AACD,GAHD;AAID,CALM;;AAOA,IAAMC,kCAAa,SAAbA,UAAa,CAACC,OAAD,EAAUC,EAAV,EAAiB;AACzC,mBAAOC,OAAP,CAAe,EAAf,EAAmB,UAAUL,GAAV,EAAeM,IAAf,EAAqB;AACtC,QAAIN,GAAJ,EAAS,MAAMA,GAAN;AACT,qBAAOH,IAAP,CAAYM,QAAQI,QAApB,EAA8BD,IAA9B,EAAoC,UAAUN,GAAV,EAAeH,IAAf,EAAqB;AACvD,UAAIG,GAAJ,EAAS,MAAMA,GAAN;AACTG,cAAQI,QAAR,GAAmBV,IAAnB;AACAW,iBAAWL,OAAX;AACD,KAJD;AAKD,GAPD;;AASA,WAASK,UAAT,CAAqBL,OAArB,EAA8B;AAC5B,mBAAWM,UAAX,CAAsB,OAAtB,EAA+BC,SAA/B,CAAyCP,OAAzC,EACCQ,IADD,CACM;AAAA,aACJ,eAAWF,UAAX,CAAsB,OAAtB,EAA+BG,IAA/B,CAAoC,EAAEC,KAAKC,OAAOC,UAAd,EAApC,EAAgEC,KAAhE,CAAsE,CAAtE,EAAyEC,IAAzE,EADI;AAAA,KADN,EAGIN,IAHJ,CAGS,mBAAW;AAChBP,SAAG,IAAH,EAASD,OAAT;AACD,KALH,EAKKe,KALL,CAKW,iBAAS;AAChBd,SAAGe,KAAH;AACD,KAPH;AAQD;AACF,CApBM;;AAsBP,IAAMC,oBAAoB;AACxBC,QAAM,UADkB;AAExBC,YAAU,UAFc;AAGxBC,SAAO,UAHiB;AAIxBhB,YAAU,UAJc;AAKxBiB,WAAS;AALe,CAA1B;;AAQA,SAASC,oBAAT,CAA+BC,IAA/B,EAAqCtB,EAArC,EAAyC;AACvC,MAAIuB,SAAS,EAAb;AACA,MAAIC,eAAe,yCAAnB;AACA,OAAK,IAAMC,KAAX,IAAoBT,iBAApB,EAAuC;AACrC,QAAMU,OAAOV,kBAAkBS,KAAlB,CAAb;AACA,QAAIC,SAAS,UAAT,IAAuB,CAACJ,KAAKG,KAAL,CAA5B,EAAyC;AACvCF,aAAOI,IAAP,CAAeF,KAAf;AACD;AACF;AACD,MAAIN,QAAQG,KAAK,OAAL,CAAZ;AACA,MAAIH,SAAS,CAACA,MAAMS,KAAN,CAAYJ,YAAZ,CAAd,EAAyC;AACvCD,WAAOI,IAAP,CAAY,oCAAZ;AACD;AACD,MAAIJ,OAAOM,MAAP,GAAgB,CAApB,EAAuB;AACrB7B,OAAGuB,MAAH;AACD,GAFD,MAEO;AACLvB,OAAG,IAAH;AACD;AACF;;QAEQqB,oB,GAAAA,oB","file":"user.js","sourcesContent":["import bcrypt from 'bcrypt'\nimport { bookmarkDb } from './db.js'\n\nexport const ComparePassword = (candidatePassword, hash, callback) => {\n  bcrypt.compare(candidatePassword, hash, function (err, isMatch) {\n    if (err) throw err\n    callback(isMatch)\n  })\n}\n\nexport const CreateUser = (newUser, cb) => {\n  bcrypt.genSalt(10, function (err, salt) {\n    if (err) throw err\n    bcrypt.hash(newUser.password, salt, function (err, hash) {\n      if (err) throw err\n      newUser.password = hash\n      insertUser(newUser)\n    })\n  })\n\n  function insertUser (newUser) {\n    bookmarkDb.collection('users').insertOne(newUser)\n    .then(result =>\n      bookmarkDb.collection('users').find({ _id: result.insertedId }).limit(1).next()\n      ).then(newUser => {\n        cb(null, newUser)\n      }).catch(error => {\n        cb(error)\n      })\n  }\n}\n\nconst registerFieldType = {\n  name: 'required',\n  username: 'required',\n  email: 'required',\n  password: 'required',\n  created: 'required'\n}\n\nfunction validateRegistration (site, cb) {\n  let errors = []\n  let emailPattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/\n  for (const field in registerFieldType) {\n    const type = registerFieldType[field]\n    if (type === 'required' && !site[field]) {\n      errors.push(`${field} is required`)\n    }\n  }\n  let email = site['email']\n  if (email && !email.match(emailPattern)) {\n    errors.push('Please enter a valid email address')\n  }\n  if (errors.length > 0) {\n    cb(errors)\n  } else {\n    cb(null)\n  }\n}\n\nexport { validateRegistration }\n"]}