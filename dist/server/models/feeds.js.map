{"version":3,"sources":["../../../src/server/models/feeds.js"],"names":["getFeeds","userDb","data","rssDb","collection","findOne","slug","_id","insert","categories","favorites","favoritesLookup","read","metadata","updated","Date","finalResult","ids","Object","keys","forEach","id","push","categoryIds","map","feeds","find","$in","toArray","feedParam","feed","filter","key","count","articles","length","error","markRead","category","titleParam","link","title","catIds","values","allReadArticles","origReadArticles","update","$pull","replace","catId","getArticles","readArticles","promises","eachFeed","$set","Promise","all","article","newTitle","finalRead","assign","refreshArticles","name","url","currentTime","getTime","res","currentArticles","fav","favLookup","readLookup","articlesFinal","articleParam","bookmark","rssCategory","rssFeed","createBookmark","newBookmarkParam","newBookmark","result","action","$push","$unset","getCategories","cb","then","addFeed","addCategory","reference","newCategory","deleteCategory","toDelete","categoryName","query","p1","p2","deleteOne","console","log","deleteFeed"],"mappings":"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","file":"feeds.js","sourcesContent":["import { ObjectId } from 'mongodb'\nimport { uniqBy } from 'lodash'\nimport fetchFeeds from '../scripts/get'\nimport { db } from './db'\n\nasync function getFeeds(userDb) {\n  try {\n    const data = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, slug: 0 })\n    if (data === null) {\n      await db.rssDb.collection(userDb).insert({\n        slug: 'data',\n        categories: {},\n        favorites: [],\n        favoritesLookup: {},\n        read: {},\n        metadata: { updated: new Date() }\n      })\n      getFeeds(userDb)\n    }\n    const finalResult = data\n    const ids = []\n    const categories = data.categories\n    Object.keys(categories).forEach((id) => {\n      ids.push(categories[id])\n    })\n    const categoryIds = ids.map(id => ObjectId(id))\n    let feeds = await db.rssDb.collection(userDb).find({\n      _id: { $in: categoryIds } }, { _id: 0 }).toArray()\n\n    feeds = feeds.map((feedParam) => {\n      const feed = feedParam\n      const keys = Object.keys(feed).filter(key => key !== 'name')\n      let count = 0\n      keys.forEach((key) => {\n        count += feed[key].articles.length\n      })\n      feed.count = count\n      return feed\n    })\n    finalResult.feeds = feeds\n\n    return { data: finalResult }\n  } catch (error) { throw (error) }\n}\n\nasync function markRead(category, feed, titleParam, link, userDb) {\n  let title = titleParam\n  try {\n    // Get all category reference ids\n    const filter = category === 'all' ? { _id: 0, categories: 1 } : { [`categories.${category}`]: 1 }\n    let catIds = await db.rssDb.collection(userDb).findOne(\n      { slug: 'data' },\n      filter\n    )\n\n    // Assign category id, this assumes only marking one category as read\n    catIds = Object.values(catIds.categories)\n    let allReadArticles = {}\n    const origReadArticles = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, read: 1 })\n\n    // If we're just removing one article\n    if (title) {\n      await db.rssDb.collection(userDb).update(\n        { _id: new ObjectId(catIds[0]) },\n        { $pull: { [`${category}.articles.${title}`]: title } }\n      )\n      title = title.replace(/\\.|\\$/g, '_')\n      allReadArticles = { [title]: link }\n\n    // For each category by document reference\n    } else {\n      for (const catId of catIds) {\n        const getArticles = feed === 'all' ? { _id: 0 } : { _id: 0, [`${feed}.articles`]: 1 }\n        const articles = await db.rssDb.collection(userDb).findOne({\n          _id: new ObjectId(catId) }, getArticles)\n        const feeds = Object.keys(articles).filter(key => key !== 'name')\n        let readArticles = []\n\n        // For each feed\n        const promises = feeds.map((eachFeed) => {\n          readArticles = [...readArticles, ...articles[eachFeed].articles]\n          return db.rssDb.collection(userDb).update(\n            { _id: new ObjectId(catId) },\n            { $set: { [`${eachFeed}.articles`]: [], [`${eachFeed}.metadata.count`]: 0 } }\n          )\n        })\n\n        await Promise.all(promises)\n\n        // Replace periods and dollar signs so article titles can be stored as\n        // keys for quick lookup\n        readArticles.forEach((article) => {\n          const newTitle = article.title.replace(/\\.|\\$/g, '_')\n          allReadArticles[newTitle] = article.link\n        })\n      }\n    }\n    const finalRead = Object.assign({}, origReadArticles.read, allReadArticles)\n    await db.rssDb.collection(userDb).update({ slug: 'data' }, { $set: { read: finalRead } })\n    return 'success'\n  } catch (error) { throw error }\n}\n\n// This is called once per feed from Router.jsx\nasync function refreshArticles(userDb, category, name, url) {\n  try {\n    // Set time updated\n    const currentTime = new Date().getTime()\n    await db.rssDb.collection(userDb).update({ slug: 'data' }, { $set: { 'metadata.updated': currentTime } })\n\n    // Get document reference for the category\n    const res = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, slug: 0 })\n    const _id = new ObjectId(res.categories[category])\n\n    let articles = await fetchFeeds(url)\n    let currentArticles = await db.rssDb.collection(userDb).findOne({\n      _id }, { _id: 0, [`${name}.articles`]: 1 })\n    currentArticles = currentArticles[name].articles\n    articles = [...articles, ...currentArticles]\n    articles = uniqBy(articles, 'title')\n\n    // Get hash maps for looking up articles that are marked as read and favorites\n    const fav = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, favoritesLookup: 1 })\n    const read = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, read: 1 })\n    const favLookup = fav.favoritesLookup\n    const readLookup = read.read\n\n    // Check if articles were previsouly marked as read. Storing a key with a .\n    // or $ is not allowed in mongo, so do a string replacement for those chars\n    let articlesFinal = []\n    // for (const article of articles) {\n\n    articles.forEach((articleParam) => {\n      const article = articleParam\n      const title = article.title.replace(/\\.|\\$/g, '_')\n      if (!readLookup[title]) {\n        // Article marked as read\n        article.bookmark = article.bookmark || false\n        if (favLookup[article.title]) { article.bookmark = true }\n        article.rssCategory = category\n        article.rssFeed = name\n        articlesFinal.push(article)\n      }\n    })\n    articlesFinal = [...articlesFinal]\n    const count = articlesFinal.length\n    await Promise.all([\n      db.rssDb.collection(userDb).update({ _id }, { $set: { [`${name}.count`]: count } }),\n      db.rssDb.collection(userDb).update({ _id }, { $set: { [`${name}.articles`]: articlesFinal } })\n    ])\n\n    return null\n  } catch (error) { throw error }\n}\n\nasync function createBookmark(userDb, newBookmarkParam) {\n  const newBookmark = newBookmarkParam\n  const category = newBookmark.rssCategory\n  const feed = newBookmark.rssFeed\n  const title = newBookmark.title\n  const link = newBookmark.link\n  const bookmark = !newBookmark.bookmark\n  newBookmark.bookmark = bookmark\n\n  try {\n    // Get ObjectId reference for category\n    const result = await db.rssDb.collection(userDb).findOne(\n      { slug: 'data' },\n      { _id: 0, [`categories.${category}`]: 1 }\n    )\n    const _id = result.categories[category]\n\n    // Toggle bookmark boolean on article object\n    await db.rssDb.collection(userDb).update(\n      { _id: ObjectId(_id), [`${feed}.articles.title`]: title },\n      { $set: { [`${feed}.articles.$.bookmark`]: bookmark } }\n    )\n\n    // Add or remove article to favorites\n    const action = bookmark === true ? 'add' : 'remove'\n    if (action === 'add') {\n      await db.rssDb.collection(userDb).update({ slug: 'data' }, { $push: { favorites: newBookmark } })\n      await db.rssDb.collection(userDb).update({ slug: 'data' }, { $set: { [`favoritesLookup.${title}`]: link } })\n    } else if (action === 'remove') {\n      await db.rssDb.collection(userDb).update({ slug: 'data' }, { $pull: { favorites: { title } } })\n      await db.rssDb.collection(userDb).update({ slug: 'data' }, { $unset: { [`favoritesLookup.${title}`]: link } })\n    }\n    return 'success'\n  } catch (error) { throw error }\n}\n\nfunction getCategories(cb) {\n  db.rssDb.collection('categories').find().toArray()\n    .then((categories) => {\n      cb(null, { categories })\n    })\n}\n\nasync function addFeed(userDb, feed) {\n  const { category, name, url } = feed\n\n  // let feedName = name\n  const update = { [`categories.${category}`]: 1 }\n\n  try {\n    const result = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, update)\n    await db.rssDb.collection(userDb).update(\n      { _id: new ObjectId(result.categories[category]) },\n      { $set: { [name]: { articles: [], url, category, updated: new Date() } } }\n    )\n    return 'success'\n  } catch (error) { throw error }\n}\n\nasync function addCategory(userDb, category) {\n  const reference = new ObjectId()\n\n  const newCategory = { [`categories.${category}`]: reference }\n\n  try {\n    await db.rssDb.collection(userDb).insert({ _id: reference, name: category })\n    await db.rssDb.collection(userDb).update({ slug: 'data' }, { $set: newCategory })\n    return newCategory\n  } catch (error) { throw error }\n}\n\nasync function deleteCategory(userDb, toDelete) {\n  let promises = []\n  try {\n    toDelete.forEach(async (category) => {\n      let catId = await db.rssDb.collection(userDb).findOne({ name: category }, { _id: 1 })\n      catId = new ObjectId(catId._id)\n\n      const categoryName = `categories.${category}`\n      const query = { [categoryName]: '' }\n\n      const p1 = await db.rssDb.collection(userDb).update({ slug: 'data' }, { $unset: query })\n      const p2 = await db.rssDb.collection(userDb).deleteOne({ _id: catId })\n      promises = [...promises, p1, p2]\n    })\n  } catch (error) { console.log(error) }\n  return Promise.all(promises)\n}\n\nasync function deleteFeed(userDb, category, feed) {\n  try {\n    const filter = { _id: 0, [`categories.${category}`]: 1 }\n    let _id = await db.rssDb.collection(userDb).findOne(\n      { slug: 'data' },\n      filter\n    )\n    _id = new ObjectId(_id.categories[category])\n    const res = await db.rssDb.collection(userDb).update({ _id }, { $unset: { [feed]: '' } })\n    return 'success'\n  } catch (error) { console.log(error) }\n}\n\nexport {\n  markRead, createBookmark, getFeeds, getCategories, refreshArticles,\n  addFeed, addCategory, deleteCategory, deleteFeed\n}\n"]}