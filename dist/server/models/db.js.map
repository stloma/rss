{"version":3,"sources":["../../../src/server/models/db.js"],"names":["MongoDBStore","store","uri","collection","on","error","bookmarkDb","connect","then","connection","catch","console","log","getBookmarks","userDb","cb","find","toArray","result","bookmarks","map","bookmark","tags","join","split","tagcount","Object","keys","forEach","tag","push","value","count","metadata","total_count","length","_metadata","records","addSite","bmarkDb","newSite","insertOne","res","_id","insertedId","url","favicon","bookmarkId","updateOne","$set","deleteSite","deleteOne","n","editSite","site","name","comment","update","updated"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;AACA;;;;AAEA,IAAMA,eAAe,8DAArB;;AAEA,IAAMC,QAAQ,IAAID,YAAJ,CACZ;AACEE,OAAK,iCADP;AAEEC,cAAY;AAFd,CADY,CAAd;;AAMAF,MAAMG,EAAN,CAAS,OAAT,EAAkB,UAAUC,KAAV,EAAiB;AACjC,MAAIA,KAAJ,EAAW,MAAMA,KAAN;AACZ,CAFD;;AAIA,IAAIC,mBAAJ;;AAEA,qBAAYC,OAAZ,CAAoB,iCAApB,EACGC,IADH,CACQ,sBAAc;AAClB,UA8EKF,UA9EL,gBAAaG,UAAb;AACD,CAHH,EAIGC,KAJH,CAIS,iBAAS;AACdC,UAAQC,GAAR,CAAY,SAAZ,EAAuBP,KAAvB;AACD,CANH;;AAQA,SAASQ,YAAT,CAAuBC,MAAvB,EAA+BC,EAA/B,EAAmC;AACjCT,aAAWH,UAAX,CAAsB,eAAeW,MAArC,EAA6CE,IAA7C,GAAoDC,OAApD,GACGT,IADH,CACQ,qBAAa;AACjB,QAAIU,SAAS,qBAAQC,UAAUC,GAAV,CAAc,UAAUC,QAAV,EAAoB;AACrD,aAAOA,SAASC,IAAhB;AACD,KAFoB,EAGjBC,IAHiB,CAGZ,GAHY,EAIlBC,KAJkB,CAIZ,GAJY,CAAR,CAAb;AAMA,QAAIC,WAAW,EAAf;AACAC,WAAOC,IAAP,CAAYT,MAAZ,EAAoBU,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnCJ,eAASK,IAAT,CAAc,EAAEC,OAAOF,GAAT,EAAcG,OAAOd,OAAOW,GAAP,CAArB,EAAd;AACD,KAFD;AAGA,QAAMI,WAAW,EAAEC,aAAaf,UAAUgB,MAAzB,EAAjB;AACApB,OAAG,IAAH,EAAS,EAAEqB,WAAWH,QAAb,EAAuBR,UAAUA,QAAjC,EAA2CY,SAASlB,SAApD,EAAT;AACD,GAdH,EAeGT,KAfH,CAeS,iBAAS;AACdK,OAAGV,KAAH;AACD,GAjBH;AAkBD;;AAED,SAASiC,OAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoCzB,EAApC,EAAwC;AACtCT,aAAWH,UAAX,CAAsBoC,OAAtB,EAA+BE,SAA/B,CAAyCD,OAAzC,EAAkD,UAAUnC,KAAV,EAAiBqC,GAAjB,EAAsB;AACtE,QAAIC,MAAMD,IAAIE,UAAd;;AAEA,2BAASJ,QAAQK,GAAjB,EAAsBF,GAAtB,EAA2B,UAAUtC,KAAV,EAAiBa,MAAjB,EAAyB;AAClD,UAAIb,KAAJ,EAAW;AACTU,WAAGV,KAAH;AACA;AACD;AACDmC,cAAQM,OAAR,GAAkB5B,SAASyB,MAAM,MAAf,GAAwB,qBAA1C;AACA,UAAII,aAAa,sBAAaJ,GAAb,CAAjB;AACArC,iBAAWH,UAAX,CAAsBoC,OAAtB,EAA+BS,SAA/B,CAAyC,EAAEL,KAAKI,UAAP,EAAzC,EACE,EAACE,MAAM;AACLH,mBAASN,QAAQM;AADZ,SAAP,EADF,EAIKpC,KAJL,CAIW,iBAAS;AACd,cAAML,KAAN;AACD,OANL;AAOD,KAdD;AAeAU,OAAGV,KAAH,EAAUqC,GAAV;AACD,GAnBD;AAoBD;;AAED,SAASQ,UAAT,CAAqBX,OAArB,EAA8BI,GAA9B,EAAmC5B,EAAnC,EAAuC;AACrCT,aAAWH,UAAX,CAAsBoC,OAAtB,EAA+BY,SAA/B,CAAyC,EAAER,KAAKA,GAAP,EAAzC,EAAuDnC,IAAvD,CAA4D,UAACU,MAAD,EAAY;AACtE,QAAIb,QAAQa,OAAOA,MAAP,CAAckC,CAAd,KAAoB,CAApB,GAAwB,IAAxB,GAA+B,KAA3C;AACArC,OAAGV,KAAH;AACD,GAHD,EAICK,KAJD,CAIO,iBAAS;AACdK,OAAGV,KAAH;AACD,GAND;AAOD;;AAED,SAASgD,QAAT,CAAmBd,OAAnB,EAA4Be,IAA5B,EAAkCvC,EAAlC,EAAsC;AACpC,MAAIgC,aAAa,sBAAaO,KAAKX,GAAlB,CAAjB;AACArC,aAAWH,UAAX,CAAsBoC,OAAtB,EAA+BS,SAA/B,CAAyC,EAAEL,KAAKI,UAAP,EAAzC,EAA8D;AAC5DE,UAAM;AACJM,YAAMD,KAAKC,IADP;AAEJV,WAAKS,KAAKT,GAFN;AAGJW,eAASF,KAAKE,OAHV;AAIJlC,YAAMgC,KAAKhC,IAJP;AAKJmC,cAAQH,KAAKI;AALT,KADsD,EAA9D,EAOM,UAAUrD,KAAV,EAAiBa,MAAjB,EAAyB;AAC3B,QAAIb,KAAJ,EAAW;AACTU,SAAGV,KAAH;AACD,KAFD,MAEO;AACLU,SAAG,IAAH,EAASG,MAAT;AACD;AACF,GAbH;AAcD;;QAEQZ,U,GAAAA,U;QAAYL,K,GAAAA,K;QAAOqC,O,GAAAA,O;QAASzB,Y,GAAAA,Y;QAAcqC,U,GAAAA,U;QAAYG,Q,GAAAA,Q","file":"db.js","sourcesContent":["import session from 'express-session'\nimport { MongoClient, ObjectId } from 'mongodb'\nimport connectMongo from 'connect-mongodb-session'\nimport { countBy } from 'lodash'\nimport { download } from '../scripts/favicon.js'\n\nconst MongoDBStore = connectMongo(session)\n\nconst store = new MongoDBStore(\n  {\n    uri: 'mongodb://localhost/bookmarkapp',\n    collection: 'sessions'\n  })\n\nstore.on('error', function (error) {\n  if (error) throw error\n})\n\nlet bookmarkDb\n\nMongoClient.connect('mongodb://localhost/bookmarkapp')\n  .then(connection => {\n    bookmarkDb = connection\n  })\n  .catch(error => {\n    console.log('ERROR: ', error)\n  })\n\nfunction getBookmarks (userDb, cb) {\n  bookmarkDb.collection('bookmarks.' + userDb).find().toArray()\n    .then(bookmarks => {\n      let result = countBy(bookmarks.map(function (bookmark) {\n        return bookmark.tags\n      })\n         .join(' ')\n        .split(' ')\n      )\n      let tagcount = []\n      Object.keys(result).forEach((tag) => {\n        tagcount.push({ value: tag, count: result[tag] })\n      })\n      const metadata = { total_count: bookmarks.length }\n      cb(null, { _metadata: metadata, tagcount: tagcount, records: bookmarks })\n    })\n    .catch(error => {\n      cb(error)\n    })\n}\n\nfunction addSite (bmarkDb, newSite, cb) {\n  bookmarkDb.collection(bmarkDb).insertOne(newSite, function (error, res) {\n    let _id = res.insertedId\n\n    download(newSite.url, _id, function (error, result) {\n      if (error) {\n        cb(error)\n        return\n      }\n      newSite.favicon = result ? _id + '.ico' : 'default-favicon.png'\n      let bookmarkId = new ObjectId(_id)\n      bookmarkDb.collection(bmarkDb).updateOne({ _id: bookmarkId },\n        {$set: {\n          favicon: newSite.favicon\n        }})\n          .catch(error => {\n            throw error\n          })\n    })\n    cb(error, res)\n  })\n}\n\nfunction deleteSite (bmarkDb, _id, cb) {\n  bookmarkDb.collection(bmarkDb).deleteOne({ _id: _id }).then((result) => {\n    let error = result.result.n === 1 ? null : '404'\n    cb(error)\n  })\n  .catch(error => {\n    cb(error)\n  })\n}\n\nfunction editSite (bmarkDb, site, cb) {\n  let bookmarkId = new ObjectId(site._id)\n  bookmarkDb.collection(bmarkDb).updateOne({ _id: bookmarkId }, {\n    $set: {\n      name: site.name,\n      url: site.url,\n      comment: site.comment,\n      tags: site.tags,\n      update: site.updated\n    }}, function (error, result) {\n      if (error) {\n        cb(error)\n      } else {\n        cb(null, result)\n      }\n    })\n}\n\nexport { bookmarkDb, store, addSite, getBookmarks, deleteSite, editSite }\n"]}