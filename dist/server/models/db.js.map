{"version":3,"sources":["../../../src/server/models/db.js"],"names":["MongoDBStore","store","uri","collection","on","error","db","connect","then","connection","rssDb","catch","console","log","getFeeds","userDb","data","findOne","slug","_id","insert","categories","favorites","favoritesLookup","read","metadata","updated","Date","finalResult","ids","Object","keys","forEach","id","push","categoryIds","map","feeds","find","$in","toArray","feedParam","feed","filter","key","count","articles","length","markRead","category","titleParam","link","title","catIds","values","finalRead","allReadArticles","origReadArticles","update","$pull","replace","catId","getArticles","readArticles","eachFeed","$set","article","newTitle","assign","refreshArticles","name","url","currentTime","getTime","res","fav","favLookup","readLookup","articlesFinal","articleParam","bookmark","rssCategory","rssFeed","Promise","all","createBookmark","newBookmarkParam","newBookmark","result","action","$push","$unset","getCategories","cb","addFeed","addCategory","reference","newCategory","deleteCategory","toDelete","promises","categoryName","query","p1","p2","deleteOne"],"mappings":"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","file":"db.js","sourcesContent":["import session from 'express-session'\nimport { MongoClient, ObjectId } from 'mongodb'\nimport connectMongo from 'connect-mongodb-session'\nimport fetchFeeds from '../scripts/get'\n\nconst MongoDBStore = connectMongo(session)\n\nconst store = new MongoDBStore(\n  {\n    uri: 'mongodb://localhost/rssapp',\n    collection: 'sessions'\n  })\n\nstore.on('error', (error) => {\n  if (error) throw error\n})\n\nconst db = {}\n\nMongoClient.connect('mongodb://localhost/rssapp')\n  .then((connection) => {\n    db.rssDb = connection\n  })\n  .catch((error) => {\n    console.log(`Error connecting to db: ${error}`)\n  })\n\nasync function getFeeds(userDb) {\n  try {\n    const data = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, slug: 0 })\n    if (data === null) {\n      await db.rssDb.collection(userDb).insert({\n        slug: 'data',\n        categories: {},\n        favorites: [],\n        favoritesLookup: {},\n        read: {},\n        metadata: { updated: new Date() }\n      })\n      getFeeds(userDb)\n    }\n    const finalResult = data\n    const ids = []\n    const categories = data.categories\n    Object.keys(categories).forEach((id) => {\n      ids.push(categories[id])\n    })\n    const categoryIds = ids.map(id => ObjectId(id))\n    let feeds = await db.rssDb.collection(userDb).find({\n      _id: { $in: categoryIds } }, { _id: 0 }).toArray()\n\n    feeds = feeds.map((feedParam) => {\n      const feed = feedParam\n      const keys = Object.keys(feed).filter(key => key !== 'name')\n      let count = 0\n      keys.forEach((key) => {\n        count += feed[key].articles.length\n      })\n      feed.count = count\n      return feed\n    })\n    finalResult.feeds = feeds\n\n    return { data: finalResult }\n  } catch (error) { throw (error) }\n}\n\nasync function markRead(category, feed, titleParam, link, userDb) {\n  let title = titleParam\n  try {\n    // Get all category reference ids\n    const filter = category === 'all' ? { _id: 0, categories: 1 } : { [`categories.${category}`]: 1 }\n    let catIds = await db.rssDb.collection(userDb).findOne(\n      { slug: 'data' },\n      filter\n    )\n\n    // Assign category id, this assumes only marking one category as read\n    catIds = Object.values(catIds.categories)\n    let finalRead = {}\n    let allReadArticles = {}\n    const origReadArticles = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, read: 1 })\n\n    // If we're just removing one article\n    if (title) {\n      await db.rssDb.collection(userDb).update(\n        { _id: new ObjectId(catIds[0]) },\n        { $pull: { [`${category}.articles.${title}`]: title } }\n      )\n      title = title.replace(/\\.|\\$/g, '_')\n      allReadArticles = { [title]: link }\n\n    // For each category by document reference\n    } else {\n      catIds.forEach(async (catId) => {\n        // Get articles, one feed/s per category\n        const getArticles = feed === 'all' ? { _id: 0 } : { _id: 0, [`${feed}.articles`]: 1 }\n        const articles = await db.rssDb.collection(userDb).findOne({\n          _id: new ObjectId(catId) }, getArticles)\n        const feeds = Object.keys(articles).filter(key => key !== 'name')\n        let readArticles = []\n\n        // For each feed\n        feeds.forEach(async (eachFeed) => {\n          readArticles = [...readArticles, ...articles[eachFeed].articles]\n          await db.rssDb.collection(userDb).update(\n            { _id: new ObjectId(catId) },\n            { $set: { [`${eachFeed}.articles`]: [], [`${eachFeed}.metadata.count`]: 0 } }\n          )\n        })\n        // Replace periods and dollar signs so article titles can be stored as\n        // keys for quick lookup\n        readArticles.forEach((article) => {\n          const newTitle = article.title.replace(/\\.|\\$/g, '_')\n          allReadArticles[newTitle] = article.link\n        })\n      })\n    }\n    finalRead = Object.assign({}, finalRead, origReadArticles.read, allReadArticles)\n    await db.rssDb.collection(userDb).update({ slug: 'data' }, { $set: { read: finalRead } })\n    return 'sucess'\n  } catch (error) { throw error }\n}\n\n// This is called once per feed from Router.jsx\nasync function refreshArticles(userDb, category, name, url) {\n  const currentTime = new Date().getTime()\n  try {\n    await db.rssDb.collection(userDb).update({ slug: 'data' }, { $set: { 'metadata.updated': currentTime } })\n\n    // Get document reference for the category\n    const res = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, slug: 0 })\n    const _id = new ObjectId(res.categories[category])\n\n    const articles = await fetchFeeds(url)\n\n    // Get hash maps for looking up articles that are marked as read and favorites\n    const fav = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, favoritesLookup: 1 })\n    const read = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, { _id: 0, read: 1 })\n    const favLookup = fav.favoritesLookup\n    const readLookup = read.read\n\n    // Check if articles were previsouly marked as read. Storing a key with a .\n    // or $ is not allowed in mongo, so do a string replacement for those chars\n    const articlesFinal = []\n    // for (const article of articles) {\n    articles.forEach((articleParam) => {\n      const article = articleParam\n      const title = article.title.replace(/\\.|\\$/g, '_')\n      if (!readLookup[title]) {\n        // Article marked as read\n        article.bookmark = article.bookmark || false\n        if (favLookup[article.title]) { article.bookmark = true }\n        article.rssCategory = category\n        article.rssFeed = name\n        articlesFinal.push(article)\n      }\n    })\n    const count = articlesFinal.length\n    await Promise.all([\n      db.rssDb.collection(userDb).update({ _id }, { $set: { [`${name}.count`]: count } }),\n      db.rssDb.collection(userDb).update({ _id }, { $set: { [`${name}.articles`]: articlesFinal } })\n    ])\n\n    return null\n  } catch (error) { throw error }\n}\n\nasync function createBookmark(userDb, newBookmarkParam) {\n  const newBookmark = newBookmarkParam\n  const category = newBookmark.rssCategory\n  const feed = newBookmark.rssFeed\n  const title = newBookmark.title\n  const link = newBookmark.link\n  const bookmark = !newBookmark.bookmark\n  newBookmark.bookmark = bookmark\n\n  try {\n    // Get ObjectId reference for category\n    const result = await db.rssDb.collection(userDb).findOne(\n      { slug: 'data' },\n      { _id: 0, [`categories.${category}`]: 1 }\n    )\n    const _id = result.categories[category]\n\n    // Toggle bookmark boolean on article object\n    await db.rssDb.collection(userDb).update(\n      { _id: ObjectId(_id), [`${feed}.articles.title`]: title },\n      { $set: { [`${feed}.articles.$.bookmark`]: bookmark } }\n    )\n\n    // Add or remove article to favorites\n    const action = bookmark === true ? 'add' : 'remove'\n    if (action === 'add') {\n      await db.rssDb.collection(userDb).update({ slug: 'data' }, { $push: { favorites: newBookmark } })\n      await db.rssDb.collection(userDb).update({ slug: 'data' }, { $set: { [`favoritesLookup.${title}`]: link } })\n    } else if (action === 'remove') {\n      await db.rssDb.collection(userDb).update({ slug: 'data' }, { $pull: { favorites: { title } } })\n      await db.rssDb.collection(userDb).update({ slug: 'data' }, { $unset: { [`favoritesLookup.${title}`]: link } })\n    }\n    return 'success'\n  } catch (error) { throw error }\n}\n\nfunction getCategories(cb) {\n  db.rssDb.collection('categories').find().toArray()\n    .then((categories) => {\n      cb(null, { categories })\n    })\n}\n\nasync function addFeed(userDb, feed) {\n  const { category, name, url } = feed\n  // let feedName = name\n  const update = { [`categories.${category}`]: 1 }\n\n  try {\n    const result = await db.rssDb.collection(userDb).findOne({ slug: 'data' }, update)\n    await db.rssDb.collection(userDb).update(\n      { _id: result.categories[category] },\n      { $set: { [name]: { articles: [], url, category, updated: new Date() } } }\n    )\n    return 'success'\n  } catch (error) { throw error }\n}\n\nasync function addCategory(userDb, category) {\n  const reference = new ObjectId()\n\n  const newCategory = { [`categories.${category}`]: reference }\n\n  try {\n    await db.rssDb.collection(userDb).insert({ _id: reference, name: category })\n    await db.rssDb.collection(userDb).update({ slug: 'data' }, { $set: newCategory })\n    return newCategory\n  } catch (error) { throw error }\n}\n\nasync function deleteCategory(userDb, toDelete) {\n  let promises = []\n  try {\n    toDelete.forEach(async (category) => {\n      let catId = await db.rssDb.collection(userDb).findOne({ name: category }, { _id: 1 })\n      catId = new ObjectId(catId._id)\n\n      const categoryName = `categories.${category}`\n      const query = { [categoryName]: '' }\n\n      const p1 = await db.rssDb.collection(userDb).update({ slug: 'data' }, { $unset: query })\n      const p2 = await db.rssDb.collection(userDb).deleteOne({ _id: catId })\n      promises = [...promises, p1, p2]\n    })\n  } catch (error) { console.log(error) }\n  return Promise.all(promises)\n}\n\nexport {\n  markRead, createBookmark, db, store, getFeeds, getCategories, refreshArticles,\n  addFeed, addCategory, deleteCategory\n}\n"]}