{"version":3,"sources":["../../../src/server/routes/user.js"],"names":["user","Router","get","req","res","status","json","name","session","destroy","logout","redirect","post","authenticate","newUser","body","created","Date","getTime","inputErrors","result","username","error","userDb","passport","newPassword"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;;;;;AAEA,IAAMA,OAAO,kBAAQC,MAAR,EAAb;;AAEAD,KAAKE,GAAL,CAAS,YAAT,sBAA4C,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxDA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAMH,IAAID,GAAJ,CAAQH,IAAR,CAAaO,IAArB,EAArB;AACD,CAFD;;AAIAP,KAAKE,GAAL,CAAS,SAAT,sBAAyC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrDD,MAAIK,OAAJ,CAAYC,OAAZ;AACAN,MAAIO,MAAJ;AACAN,MAAIO,QAAJ,CAAa,QAAb;AACD,CAJD;;AAMAX,KAAKY,IAAL,CAAU,QAAV,EAAoB,mBAASC,YAAT,CAAsB,OAAtB,CAApB,EAAoD,UAACV,GAAD,EAAMC,GAAN,EAAc;AAChEA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAMH,IAAID,GAAJ,CAAQH,IAAR,CAAaO,IAArB,EAArB;AACD,CAFD;;AAIAP,KAAKY,IAAL,CAAU,eAAV,EAA2B,gBAAOT,GAAP,EAAYC,GAAZ,EAAoB;AAC7C,MAAMU,UAAUX,IAAIY,IAApB;AACAD,UAAQE,OAAR,GAAkB,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;;AAEA,MAAMC,cAAc,gCAAqBL,OAArB,CAApB;;AAEA,MAAIK,WAAJ,EAAiB;AAAEf,QAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBa,WAArB;AAAmC;;AAEtD,MAAI;AACF,QAAMC,SAAS,MAAM,sBAAWN,OAAX,CAArB;AACA,QAAIM,WAAW,KAAf,EAAsB;AACpBhB,UAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAIQ,QAAQO,QAAZ,mDAArB;AACD,KAFD,MAEO;AACLjB,UAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,8BAAgDc,OAAOC,QAAvD;AACD;AACF,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdlB,QAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,6BAA+CgB,KAA/C;AACD;AACF,CAlBD;;AAoBAtB,KAAKY,IAAL,CAAU,iBAAV,sBAAkD,gBAAOT,GAAP,EAAYC,GAAZ,EAAoB;AACpE,MAAMmB,SAASpB,IAAIK,OAAJ,CAAYgB,QAAZ,CAAqBxB,IAApC;AACA,MAAMyB,cAActB,IAAIY,IAAxB;;AAEA;;AAEA;;AAEA,MAAI;AACF,UAAM,0BAAeQ,MAAf,EAAuBE,WAAvB,CAAN;AACArB,QAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+BAArB;AACD,GAHD,CAGE,OAAOgB,KAAP,EAAc;AACdlB,QAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,6BAA+CgB,KAA/C;AACD;AACF,CAdD;;kBAgBetB,I","file":"user.js","sourcesContent":["import express from 'express'\nimport passport from 'passport'\n\nimport { CreateUser, ChangePassword, validateRegistration } from '../models/user'\nimport ensureAuthenticated from '../auth/passport'\n\nconst user = express.Router()\n\nuser.get('/protected', ensureAuthenticated, (req, res) => {\n  res.status(200).json({ name: res.req.user.name })\n})\n\nuser.get('/logout', ensureAuthenticated, (req, res) => {\n  req.session.destroy()\n  req.logout()\n  res.redirect('/login')\n})\n\nuser.post('/login', passport.authenticate('local'), (req, res) => {\n  res.status(200).json({ name: res.req.user.name })\n})\n\nuser.post('/registeruser', async (req, res) => {\n  const newUser = req.body\n  newUser.created = new Date().getTime()\n\n  const inputErrors = validateRegistration(newUser)\n\n  if (inputErrors) { res.status(400).json(inputErrors) }\n\n  try {\n    const result = await CreateUser(newUser)\n    if (result === 11000) {\n      res.status(409).json([`${newUser.username} already registered, please try another name.`])\n    } else {\n      res.status(200).json(`Successfully registered ${result.username}`)\n    }\n  } catch (error) {\n    res.status(500).json(`Internal Server Error: ${error}`)\n  }\n})\n\nuser.post('/changepassword', ensureAuthenticated, async (req, res) => {\n  const userDb = req.session.passport.user\n  const newPassword = req.body\n\n  // const inputErrors = validateRegistration(newUser)\n\n  // if (inputErrors) { res.status(400).json(inputErrors) }\n\n  try {\n    await ChangePassword(userDb, newPassword)\n    res.status(200).json('Password changed successfully')\n  } catch (error) {\n    res.status(500).json(`Internal Server Error: ${error}`)\n  }\n})\n\nexport default user\n"]}