{"version":3,"sources":["../../../src/server/routes/user.js"],"names":["router","Router","get","req","res","session","destroy","logout","post","authenticate","status","json","name","user","newUser","body","created","Date","getTime","validateCb","error","result","registerCb","code","inputType","message","split","username"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;;;AAEA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEAD,OAAOE,GAAP,CAAW,SAAX,kCAA2C,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC7DD,MAAIE,OAAJ,CAAYC,OAAZ;AACAH,MAAII,MAAJ;AACD,CAHD;;AAKAP,OAAOQ,IAAP,CAAY,QAAZ,EAAsB,mBAASC,YAAT,CAAsB,OAAtB,CAAtB,EAAsD,UAAUN,GAAV,EAAeC,GAAf,EAAoB;AACxEA,MAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAMR,IAAID,GAAJ,CAAQU,IAAR,CAAaD,IAArB,EAArB;AACD,CAFD;;AAIAZ,OAAOQ,IAAP,CAAY,eAAZ,EAA6B,UAACL,GAAD,EAAMC,GAAN,EAAc;AACzC,MAAIU,UAAUX,IAAIY,IAAlB;AACAD,UAAQE,OAAR,GAAkB,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;;AAEA,kCAAqBJ,OAArB,EAA8BK,UAA9B;;AAEA,WAASA,UAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,QAAID,KAAJ,EAAW;AACThB,UAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBS,KAArB;AACD,KAFD,MAEO;AACL,4BAAWN,OAAX,EAAoBQ,UAApB;AACD;AACF;;AAED,WAASA,UAAT,CAAqBF,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,QAAID,KAAJ,EAAW;AACT,UAAIA,MAAMG,IAAN,KAAe,KAAnB,EAA0B;AACxB,YAAIC,YAAYJ,MAAMK,OAAN,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAhB;AACAtB,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAACa,YAAY,qBAAb,CAArB;AACA;AACD;AACDpB,UAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEc,qCAAmCL,KAArC,EAArB;AACA;AACD;AACDhB,QAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,8BAAgDG,QAAQa,QAAxD;AACD;AACF,CA1BD;;QA4BS3B,M,GAAAA,M","file":"user.js","sourcesContent":["import express from 'express'\nimport passport from 'passport'\n\nimport { CreateUser, validateRegistration } from '../models/user.js'\nimport { ensureAuthenticated } from '../auth/passport.js'\n\nconst router = express.Router()\n\nrouter.get('/logout', ensureAuthenticated, function (req, res) {\n  req.session.destroy()\n  req.logout()\n})\n\nrouter.post('/login', passport.authenticate('local'), function (req, res) {\n  res.status(200).json({ name: res.req.user.name })\n})\n\nrouter.post('/registeruser', (req, res) => {\n  let newUser = req.body\n  newUser.created = new Date().getTime()\n\n  validateRegistration(newUser, validateCb)\n\n  function validateCb (error, result) {\n    if (error) {\n      res.status(400).json(error)\n    } else {\n      CreateUser(newUser, registerCb)\n    }\n  }\n\n  function registerCb (error, result) {\n    if (error) {\n      if (error.code === 11000) {\n        let inputType = error.message.split('$')[1].split(' ')[0]\n        res.status(409).json([inputType + ' already registered'])\n        return\n      }\n      res.status(500).json({ message: `Internal Server Error: ${error}` })\n      return\n    }\n    res.status(200).json(`Successfully registered ${newUser.username}`)\n  }\n})\n\nexport { router }\n"]}